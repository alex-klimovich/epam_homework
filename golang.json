{"kind": "Listing", "data": {"modhash": "", "children": [{"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o5ldv", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "condanky", "media": null, "score": 27, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 3, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o5ldv/postgresql_client_library_for_go/", "name": "t3_3o5ldv", "created": 1444458457.0, "url": "https://github.com/jackc/pgx", "author_flair_text": null, "quarantine": false, "title": "PostgreSQL client library for Go", "created_utc": 1444429657.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 27}}, {"kind": "t3", "data": {"domain": "npf.io", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o6pnd", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "natefinch", "media": null, "score": 9, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o6pnd/returning_errors/", "name": "t3_3o6pnd", "created": 1444480724.0, "url": "https://npf.io/2015/10/errors/", "author_flair_text": null, "quarantine": false, "title": "Returning Errors", "created_utc": 1444451924.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 9}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/opennota/markdown\"&gt;A markdown parser&lt;/a&gt; seeks for a new developer. If anyone is willing and ready to keep up with the ever-changing CommonMark spec, speak now or forever hold your peace. I just don&amp;#39;t have time for this, especially considering that they still make breaking changes. I&amp;#39;m considering relicensing the package under MIT or BSD license and moving it to a new GitHub organization.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[A markdown parser](https://github.com/opennota/markdown) seeks for a new developer. If anyone is willing and ready to keep up with the ever-changing CommonMark spec, speak now or forever hold your peace. I just don't have time for this, especially considering that they still make breaking changes. I'm considering relicensing the package under MIT or BSD license and moving it to a new GitHub organization.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o7jkh", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "opennota", "media": null, "score": 2, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": true, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o7jkh/new_developer_wanted_for_a_markdown_parser_package/", "name": "t3_3o7jkh", "created": 1444505612.0, "url": "https://www.reddit.com/r/golang/comments/3o7jkh/new_developer_wanted_for_a_markdown_parser_package/", "author_flair_text": null, "quarantine": false, "title": "New developer wanted for a markdown parser package", "created_utc": 1444476812.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 2}}, {"kind": "t3", "data": {"domain": "blog.golang.org", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o6h12", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "campoy", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o6h12/golanguk_2015_the_go_blog/", "name": "t3_3o6h12", "created": 1444475480.0, "url": "http://blog.golang.org/gouk15", "author_flair_text": null, "quarantine": false, "title": "GolangUK 2015 - The Go Blog", "created_utc": 1444446680.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "dave.cheney.net", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o2svs", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "dgryski", "media": null, "score": 58, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 13, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o2svs/padding_is_hard/", "name": "t3_3o2svs", "created": 1444407252.0, "url": "http://dave.cheney.net/2015/10/09/padding-is-hard", "author_flair_text": null, "quarantine": false, "title": "Padding is hard", "created_utc": 1444378452.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 58}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o4f6j", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "celrenheit", "media": null, "score": 7, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o4f6j/scheduler_of_spiders_for_scraping_and_parsing/", "name": "t3_3o4f6j", "created": 1444439853.0, "url": "https://github.com/celrenheit/spider", "author_flair_text": null, "quarantine": false, "title": "Scheduler of spiders for scraping and parsing HTML and JSON pages written in Go", "created_utc": 1444411053.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 7}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o5479", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "lxfontes", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 4, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o5479/gowebtokenizer_url_safe_timed_tokens/", "name": "t3_3o5479", "created": 1444450488.0, "url": "https://github.com/go-web/tokenizer", "author_flair_text": null, "quarantine": false, "title": "go-web/tokenizer - URL safe timed tokens", "created_utc": 1444421688.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How is the demand for Golang developers in US? I am located in the East Coast?&lt;/p&gt;\n\n&lt;p&gt;Are Go jobs Junior or one year experience friendly?&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "How is the demand for Golang developers in US? I am located in the East Coast?\n\nAre Go jobs Junior or one year experience friendly?\n\nThanks", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o4qqk", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "AirJavascript", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": 1444423216.0, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o4qqk/how_is_the_demand_for_golang_developers_in_us/", "name": "t3_3o4qqk", "created": 1444444697.0, "url": "https://www.reddit.com/r/golang/comments/3o4qqk/how_is_the_demand_for_golang_developers_in_us/", "author_flair_text": null, "quarantine": false, "title": "How is the demand for Golang developers in US?", "created_utc": 1444415897.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been spending some time tracking down issues in a production site that I believe are related to these errors showing up in the logs:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;write tcp 204.248.121.130:41259: broken pipe\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It looked like the errors were coming from potentially random places in the HTML template, so on a whim, I decided to try a solution that &lt;em&gt;actually worked&lt;/em&gt;, to my surprise. The fix I came up with was to buffer the output by changing this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// where `w` is an instance of http.ResponseWriter\nif err := views.ExecuteTemplate(w, &amp;quot;template&amp;quot;, context); err != nil {\n    // handle error\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var buf bytes.Buffer\nif err := views.ExecuteTemplate(&amp;amp;buf, &amp;quot;template&amp;quot;, context); err != nil {\n    // handle error\n} else {\n    io.Copy(w, &amp;amp;buf)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My question is: why? Why does buffering the data written to &lt;code&gt;http.ResponseWriter&lt;/code&gt; fix this issue? The only thing I can think of is that there&amp;#39;s some kind of timeout from the first call to &lt;code&gt;w.Write()&lt;/code&gt; until the response is sent and the pipe is closed, since the template writes as it goes, but with the buffer that gap is drastically narrowed.&lt;/p&gt;\n\n&lt;p&gt;It should be noted that it took using a &lt;a href=\"https://github.com/rakyll/boom\"&gt;load generator&lt;/a&gt; to be able to reproduce the errors outside of production (note to self for all future projects: use a load generator &lt;em&gt;before&lt;/em&gt; deploying to production), and the templates themselves are pretty sizeable and have a lot of room for optimization.&lt;/p&gt;\n\n&lt;p&gt;What gives?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I've been spending some time tracking down issues in a production site that I believe are related to these errors showing up in the logs:\n\n    write tcp 204.248.121.130:41259: broken pipe\n\nIt looked like the errors were coming from potentially random places in the HTML template, so on a whim, I decided to try a solution that *actually worked*, to my surprise. The fix I came up with was to buffer the output by changing this:\n\n    // where `w` is an instance of http.ResponseWriter\n    if err := views.ExecuteTemplate(w, \"template\", context); err != nil {\n        // handle error\n    }\n\nto this:\n\n    var buf bytes.Buffer\n    if err := views.ExecuteTemplate(&amp;buf, \"template\", context); err != nil {\n        // handle error\n    } else {\n        io.Copy(w, &amp;buf)\n    }\n\nMy question is: why? Why does buffering the data written to `http.ResponseWriter` fix this issue? The only thing I can think of is that there's some kind of timeout from the first call to `w.Write()` until the response is sent and the pipe is closed, since the template writes as it goes, but with the buffer that gap is drastically narrowed.\n\nIt should be noted that it took using a [load generator](https://github.com/rakyll/boom) to be able to reproduce the errors outside of production (note to self for all future projects: use a load generator *before* deploying to production), and the templates themselves are pretty sizeable and have a lot of room for optimization.\n\nWhat gives?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o54z6", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "MoneyWorthington", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o54z6/http_server_broken_pipe_errors/", "name": "t3_3o54z6", "created": 1444450847.0, "url": "https://www.reddit.com/r/golang/comments/3o54z6/http_server_broken_pipe_errors/", "author_flair_text": null, "quarantine": false, "title": "HTTP Server Broken Pipe Errors", "created_utc": 1444422047.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "insidethecpu.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o3x2i", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "pablomooney", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o3x2i/simple_date_handling_in_go/", "name": "t3_3o3x2i", "created": 1444432040.0, "url": "http://insidethecpu.com/2015/10/09/simple-date-handling-in-go/", "author_flair_text": null, "quarantine": false, "title": "Simple Date Handling in Go", "created_utc": 1444403240.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;I am looking to generate a list of microservice gateway/proxy/routers that also provide an API like Vulcand/Etcd.  They don&amp;#39;t need to be written in Go, but it must have an API where nodes can be added and removed.&lt;/p&gt;\n\n&lt;p&gt;Any other you know of?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello,\n\nI am looking to generate a list of microservice gateway/proxy/routers that also provide an API like Vulcand/Etcd.  They don't need to be written in Go, but it must have an API where nodes can be added and removed.\n\nAny other you know of?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o3jhj", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "jasonrichardsmith", "media": null, "score": 5, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 5, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o3jhj/microservice_gatewayproxyrouter_list/", "name": "t3_3o3jhj", "created": 1444425666.0, "url": "https://www.reddit.com/r/golang/comments/3o3jhj/microservice_gatewayproxyrouter_list/", "author_flair_text": null, "quarantine": false, "title": "Microservice gateway/proxy/router list?", "created_utc": 1444396866.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 5}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi I am trying to replace the current jenkins on the organization I work because java is eating all the memory, A couple of days ago I found drone CI a simple CI server based on Go and docker, everything looks fine until I try to create a database inside the script, apparently I have no access psql even though on the documentation says that is possible. Any idea?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi I am trying to replace the current jenkins on the organization I work because java is eating all the memory, A couple of days ago I found drone CI a simple CI server based on Go and docker, everything looks fine until I try to create a database inside the script, apparently I have no access psql even though on the documentation says that is possible. Any idea?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o50tg", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "3zcurdia", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o50tg/q_i_cannot_call_psql_inside_drone_ci_any_idea/", "name": "t3_3o50tg", "created": 1444449020.0, "url": "https://www.reddit.com/r/golang/comments/3o50tg/q_i_cannot_call_psql_inside_drone_ci_any_idea/", "author_flair_text": null, "quarantine": false, "title": "Q: I cannot call psql inside Drone CI. Any idea?", "created_utc": 1444420220.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}, {"kind": "t3", "data": {"domain": "a.knrz.co", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o3pbs", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "knrz", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 5, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o3pbs/show_rgolang_i_made_a_json_api_for_the_onions/", "name": "t3_3o3pbs", "created": 1444428498.0, "url": "http://a.knrz.co/horoscope-api/help", "author_flair_text": null, "quarantine": false, "title": "Show /r/golang: I made a JSON API for The Onion's Horoscopes in Go", "created_utc": 1444399698.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I need some help related to my web application project which is built using Negroni library, if that matters.\nThe application needs to be authenticated against external server using LDAP and that part is okay.\nI was reading through several tutorials and other help pages describing how to manage user sessions but those invariably go into describing how to accept username password and then create keys and stuff and in some cases, even email confirmation.&lt;/p&gt;\n\n&lt;p&gt;I was looking for something very simple and I was hoping you could point me to a library or page which I could use.\nSo, I have this function which does the LDAP stuff returns true on successful LDAP auth:\nfunc authenticate( username string, password string) bool&lt;/p&gt;\n\n&lt;p&gt;I created a handler for login form which handles the login form&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func login(w http.ResponseWriter, r *http.Request, p httprouter.Params)\n    if r.Method == &amp;quot;POST&amp;quot; {\n        if err := r.ParseForm(); err != nil {\n        w.WriteHeader(http.StatusInternalServerError)\n        log.Println(&amp;quot;Form parsing failure&amp;quot;)\n        return\n         }\n\n    username := r.PostFormValue(&amp;quot;username&amp;quot;)\n    password := r.PostFormValue(&amp;quot;password&amp;quot;)\n    if username != &amp;quot;&amp;quot; &amp;amp;&amp;amp; password != &amp;quot;&amp;quot; {\n        if authenticate(username, password) {\n            log.Println(&amp;quot;successful authentication: &amp;quot;, username)\n        } else {\n            log.Println(&amp;quot;failed authentication&amp;quot;)\n        }\n    }\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am unable to fit this with rest of the stuff. I have not done web applications in the past so not clear about sessions.\nI need to be able to start session for a user and remember via cookie that user is already logged in.\nIn other pages like &amp;quot;/home&amp;quot; I will need to print a message at the top saying &amp;quot;logged in as: some_username&amp;quot;\nLastly users should be able to logout.\nAny pointers will be of great help.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I need some help related to my web application project which is built using Negroni library, if that matters.\nThe application needs to be authenticated against external server using LDAP and that part is okay.\nI was reading through several tutorials and other help pages describing how to manage user sessions but those invariably go into describing how to accept username password and then create keys and stuff and in some cases, even email confirmation.\n\nI was looking for something very simple and I was hoping you could point me to a library or page which I could use.\nSo, I have this function which does the LDAP stuff returns true on successful LDAP auth:\nfunc authenticate( username string, password string) bool\n\nI created a handler for login form which handles the login form\n\n    func login(w http.ResponseWriter, r *http.Request, p httprouter.Params)\n\t    if r.Method == \"POST\" {\n\t\t    if err := r.ParseForm(); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\tlog.Println(\"Form parsing failure\")\n\t\t\treturn\n             }\n\n\t\tusername := r.PostFormValue(\"username\")\n\t\tpassword := r.PostFormValue(\"password\")\n\t\tif username != \"\" &amp;&amp; password != \"\" {\n\t\t\tif authenticate(username, password) {\n\t\t\t\tlog.Println(\"successful authentication: \", username)\n\t\t\t} else {\n\t\t\t\tlog.Println(\"failed authentication\")\n\t\t\t}\n\t\t}\n\t}\n    }\n\nI am unable to fit this with rest of the stuff. I have not done web applications in the past so not clear about sessions.\nI need to be able to start session for a user and remember via cookie that user is already logged in.\nIn other pages like \"/home\" I will need to print a message at the top saying \"logged in as: some_username\"\nLastly users should be able to logout.\nAny pointers will be of great help.\n", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o39kx", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Have_No_Name", "media": null, "score": 4, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o39kx/how_to_manage_authenticated_sessions/", "name": "t3_3o39kx", "created": 1444420333.0, "url": "https://www.reddit.com/r/golang/comments/3o39kx/how_to_manage_authenticated_sessions/", "author_flair_text": null, "quarantine": false, "title": "how to manage authenticated sessions?", "created_utc": 1444391533.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 4}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;how can i use goroutines to send random data into a channel and wait until all goroutines are finished?&lt;/p&gt;\n\n&lt;p&gt;I tried with this code but does not work, any suggestion, ideas?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.golang.org/p/VPmGM_bhhq\"&gt;https://play.golang.org/p/VPmGM_bhhq&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi,\n\nhow can i use goroutines to send random data into a channel and wait until all goroutines are finished?\n\nI tried with this code but does not work, any suggestion, ideas?\n\nhttps://play.golang.org/p/VPmGM_bhhq", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o3s9h", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Volox", "media": null, "score": 1, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 20, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3o3s9h/goroutines_channels_problem_with_unbounded_data/", "name": "t3_3o3s9h", "created": 1444429909.0, "url": "https://www.reddit.com/r/golang/comments/3o3s9h/goroutines_channels_problem_with_unbounded_data/", "author_flair_text": null, "quarantine": false, "title": "goroutines channels problem with unbounded data", "created_utc": 1444401109.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 1}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o0rrh", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Sioro-Neoku", "media": null, "score": 25, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o0rrh/gopeerflix_video_streaming_torrent_client_in_go/", "name": "t3_3o0rrh", "created": 1444367350.0, "url": "https://github.com/Sioro-Neoku/go-peerflix", "author_flair_text": null, "quarantine": false, "title": "Go-peerflix - Video streaming torrent client in go", "created_utc": 1444338550.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 25}}, {"kind": "t3", "data": {"domain": "golangbootcamp.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o0dit", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "anonfunction", "media": null, "score": 30, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 1, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o0dit/learning_golang_golang_bootcamps_free_ebook_has/", "name": "t3_3o0dit", "created": 1444361506.0, "url": "http://www.golangbootcamp.com/book/_single-page", "author_flair_text": null, "quarantine": false, "title": "Learning Golang? Golang Bootcamp's free ebook has lessons with exercises including linked play.golang.org examples.", "created_utc": 1444332706.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 30}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nybbg", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "dghubble", "media": null, "score": 102, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 12, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3nybbg/gologin_login_handlers_for_google_github_facebook/", "name": "t3_3nybbg", "created": 1444326166.0, "url": "https://github.com/dghubble/gologin", "author_flair_text": null, "quarantine": false, "title": "gologin: Login handlers for Google, Github, Facebook, Twitter, SMS, OAuth1/2, etc.", "created_utc": 1444297366.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 102}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3o211d", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "gombadi", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 1, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3o211d/dnsseeder_seed_multiple_twisterbitcoin_networks/", "name": "t3_3o211d", "created": 1444388799.0, "url": "https://github.com/gombadi/dnsseeder", "author_flair_text": null, "quarantine": false, "title": "dnsseeder: seed multiple twister/bitcoin networks from one server with Go", "created_utc": 1444359999.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"http://www.crummy.com/software/BeautifulSoup/\"&gt;Beautiful Soup&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "[Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/)", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nyumc", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "Klink-a-dink-dink", "media": null, "score": 11, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 7, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3nyumc/whats_the_go_equivalent_of_pythons_beautiful_soup/", "name": "t3_3nyumc", "created": 1444338424.0, "url": "https://www.reddit.com/r/golang/comments/3nyumc/whats_the_go_equivalent_of_pythons_beautiful_soup/", "author_flair_text": null, "quarantine": false, "title": "What's the go equivalent of Python's Beautiful Soup (an HTML scraping library) ?", "created_utc": 1444309624.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 11}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nym9z", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "vmihailenco", "media": null, "score": 8, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 0, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3nym9z/practical_database_sharding_with_go_and_postgresql/", "name": "t3_3nym9z", "created": 1444308592.0, "url": "https://github.com/go-pg/sharding/", "author_flair_text": null, "quarantine": false, "title": "Practical database sharding with Go and PostgreSQL", "created_utc": 1444304992.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 8}}, {"kind": "t3", "data": {"domain": "medium.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nty5j", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "dgryski", "media": null, "score": 30, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3nty5j/learn_golang_graphql_relay_1/", "name": "t3_3nty5j", "created": 1444223496.0, "url": "https://medium.com/@sogko/learn-golang-graphql-relay-1-e59ea174a902", "author_flair_text": null, "quarantine": false, "title": "Learn Golang + GraphQL + Relay #1", "created_utc": 1444219896.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 30}}, {"kind": "t3", "data": {"domain": "play.golang.org", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nvc78", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "srikanthegdee", "media": null, "score": 3, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 6, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3nvc78/simple_infinite_recursive_json_decoder_contrived/", "name": "t3_3nvc78", "created": 1444245712.0, "url": "http://play.golang.org/p/nGxnZt_BCa", "author_flair_text": null, "quarantine": false, "title": "Simple infinite recursive json decoder (contrived)", "created_utc": 1444242112.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 3}}, {"kind": "t3", "data": {"domain": "github.com", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nr3yp", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "ant-ham", "media": null, "score": 36, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 11, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": false, "from_id": null, "permalink": "/r/golang/comments/3nr3yp/gabs_is_a_small_utility_for_dealing_with_dynamic/", "name": "t3_3nr3yp", "created": 1444167033.0, "url": "https://github.com/Jeffail/gabs", "author_flair_text": null, "quarantine": false, "title": "Gabs is a small utility for dealing with dynamic or unknown JSON structures in golang. It's pretty much just a helpful wrapper around the golang json.Marshal/json.Unmarshal behaviour and map[string]interface{} objects. It does nothing spectacular except for being fabulous.", "created_utc": 1444163433.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 36}}, {"kind": "t3", "data": {"domain": "self.golang", "banned_by": null, "media_embed": {}, "subreddit": "golang", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am making a application, i need it to be able to upload files from a pre-set directory to a FTP server at a remote host(VPS). &lt;/p&gt;\n\n&lt;p&gt;Its hard for me to find anything other then FTP server examples, is there a simple way to do this in Go?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "I am making a application, i need it to be able to upload files from a pre-set directory to a FTP server at a remote host(VPS). \n\nIts hard for me to find anything other then FTP server examples, is there a simple way to do this in Go?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "link_flair_text": null, "id": "3nuvzu", "from_kind": null, "gilded": 0, "archived": false, "clicked": false, "report_reasons": null, "author": "SaturnsVoid", "media": null, "score": 0, "approved_by": null, "over_18": false, "hidden": false, "num_comments": 2, "thumbnail": "", "subreddit_id": "t5_2rc7j", "hide_score": false, "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "downs": 0, "secure_media_embed": {}, "saved": false, "removal_reason": null, "stickied": false, "from": null, "is_self": true, "from_id": null, "permalink": "/r/golang/comments/3nuvzu/ftp_upload_file_on_windows/", "name": "t3_3nuvzu", "created": 1444239039.0, "url": "https://www.reddit.com/r/golang/comments/3nuvzu/ftp_upload_file_on_windows/", "author_flair_text": null, "quarantine": false, "title": "FTP Upload file on Windows", "created_utc": 1444235439.0, "distinguished": null, "mod_reports": [], "visited": false, "num_reports": null, "ups": 0}}], "after": "t3_3nuvzu", "before": null}}